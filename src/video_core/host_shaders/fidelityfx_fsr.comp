//!#version 460 core
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types : require

// FidelityFX Super Resolution Sample
//
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

layout( push_constant ) uniform constants {
    u32vec2 output_offset;
    u32vec2 output_size;
};

uvec4 Const0;
uvec4 Const1;
uvec4 Const2;
uvec4 Const3;
uvec4 Sample;

#define A_GPU 1
#define A_GLSL 1
#define A_HALF

#include "ffx_a.h"

#if SAMPLE_EASU
    #define FSR_EASU_H 1
    AH4 FsrEasuRH(AF2 p) { AH4 res = AH4(textureGather(InputTexture, p, 0)); return res; }
    AH4 FsrEasuGH(AF2 p) { AH4 res = AH4(textureGather(InputTexture, p, 1)); return res; }
    AH4 FsrEasuBH(AF2 p) { AH4 res = AH4(textureGather(InputTexture, p, 2)); return res; }
#endif
#if SAMPLE_RCAS
    #define FSR_RCAS_H
    AH4 FsrRcasLoadH(ASW2 p) { return AH4(texelFetch(InputTexture, ASU2(p), 0)); }
    void FsrRcasInputH(inout AH1 r,inout AH1 g,inout AH1 b){}
#endif

#include "ffx_fsr1.h"

void CurrFilter(AU2 pos) {

#if SAMPLE_BILINEAR
    AF2 pp = (AF2(pos) * AF2_AU2(Const0.xy) + AF2_AU2(Const0.zw)) * AF2_AU2(Const1.xy) + AF2(0.5, -0.5) * AF2_AU2(Const1.zw);
    imageStore(OutputTexture, ASU2(pos + output_offset), textureLod(InputTexture, pp, 0.0));
#endif
#if SAMPLE_EASU
    AH3 c;
    FsrEasuH(c, pos, Const0, Const1, Const2, Const3);
    if( Sample.x == 1 )
        c *= c;
    imageStore(OutputTexture, ASU2(pos + output_offset), AH4(c, 1));
#endif
#if SAMPLE_RCAS
    AH3 c;
    FsrRcasH(c.r, c.g, c.b, pos, Const0);
    if( Sample.x == 1 )
        c *= c;
    imageStore(OutputTexture, ASU2(pos + output_offset), AH4(c, 1));
#endif

}

layout(local_size_x=8, local_size_y=8) in;
void main() {
    uvec2 ires = textureSize(InputTexture, 0);
    uvec2 ores = output_size;

    FsrEasuCon(Const0, Const1, Const2, Const3, ires.x, ires.y, ires.x, ires.y, ores.x, ores.y);

    CurrFilter(gl_GlobalInvocationID.xy);
}
